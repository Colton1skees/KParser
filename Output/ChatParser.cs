//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/colton/.IdeaIC2019.2/config/scratches\Chat.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ChatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBER=1, WHITESPACE=2, LPARAM=3, RPARAM=4, Comma=5, GETPARENTVALUE=6, 
		EXTRACTMINT=7, MI=8, ADDMINT=9;
	public const int
		RULE_functionCall = 0, RULE_function = 1;
	public static readonly string[] ruleNames = {
		"functionCall", "function"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "' '", "'('", "')'", "','", "'getParentValue'", "'extractMInt'", 
		"'mi'", "'addMInt'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "WHITESPACE", "LPARAM", "RPARAM", "Comma", "GETPARENTVALUE", 
		"EXTRACTMINT", "MI", "ADDMINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode LPARAM() { return GetToken(ChatParser.LPARAM, 0); }
		public ITerminalNode RPARAM() { return GetToken(ChatParser.RPARAM, 0); }
		public ITerminalNode[] Comma() { return GetTokens(ChatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(ChatParser.Comma, i);
		}
		public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(ChatParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ChatParser.NUMBER, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChatListener typedListener = listener as IChatListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChatListener typedListener = listener as IChatListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChatVisitor<TResult> typedVisitor = visitor as IChatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 0, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; function();
			State = 5; Match(LPARAM);
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GETPARENTVALUE:
				case EXTRACTMINT:
				case MI:
				case ADDMINT:
					{
					State = 6; functionCall();
					}
					break;
				case NUMBER:
					{
					State = 7; Match(NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10; Match(Comma);
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << GETPARENTVALUE) | (1L << EXTRACTMINT) | (1L << MI) | (1L << ADDMINT))) != 0) );
			State = 15; Match(RPARAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode GETPARENTVALUE() { return GetToken(ChatParser.GETPARENTVALUE, 0); }
		public ITerminalNode EXTRACTMINT() { return GetToken(ChatParser.EXTRACTMINT, 0); }
		public ITerminalNode MI() { return GetToken(ChatParser.MI, 0); }
		public ITerminalNode ADDMINT() { return GetToken(ChatParser.ADDMINT, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChatListener typedListener = listener as IChatListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChatListener typedListener = listener as IChatListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChatVisitor<TResult> typedVisitor = visitor as IChatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GETPARENTVALUE) | (1L << EXTRACTMINT) | (1L << MI) | (1L << ADDMINT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x16', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\v', '\n', '\x2', '\x3', '\x2', '\x6', '\x2', '\xE', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x2', '\x2', '\x4', '\x2', '\x4', '\x2', 
		'\x3', '\x3', '\x2', '\b', '\v', '\x2', '\x15', '\x2', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x13', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', 
		'\x5', '\x4', '\x3', '\x2', '\a', '\r', '\a', '\x5', '\x2', '\x2', '\b', 
		'\v', '\x5', '\x2', '\x2', '\x2', '\t', '\v', '\a', '\x3', '\x2', '\x2', 
		'\n', '\b', '\x3', '\x2', '\x2', '\x2', '\n', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\a', '\a', 
		'\x2', '\x2', '\r', '\n', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\a', '\x6', '\x2', '\x2', '\x12', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\t', '\x2', '\x2', '\x2', '\x14', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\n', '\xF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
