//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/colton/.IdeaIC2019.2/config/scratches\KGram.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KDetails {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="KGramParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IKGramListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] KGramParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] KGramParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfExpression([NotNull] KGramParser.IfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfExpression([NotNull] KGramParser.IfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryBoolExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryBoolExpression([NotNull] KGramParser.UnaryBoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryBoolExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryBoolExpression([NotNull] KGramParser.UnaryBoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] KGramParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] KGramParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerExpression([NotNull] KGramParser.IntegerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerExpression([NotNull] KGramParser.IntegerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryBoolExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBoolExpression([NotNull] KGramParser.BinaryBoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryBoolExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBoolExpression([NotNull] KGramParser.BinaryBoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpression([NotNull] KGramParser.CallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpression([NotNull] KGramParser.CallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] KGramParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="KGramParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] KGramParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="KGramParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoot([NotNull] KGramParser.RootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="KGramParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoot([NotNull] KGramParser.RootContext context);
}
} // namespace KDetails
