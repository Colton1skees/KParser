//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/colton/.IdeaIC2019.2/config/scratches\KGram.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KDetails {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KGramLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, THEN=2, ELSE=3, FI=4, LPARAM=5, RPARAM=6, COMMA=7, BOOL_BIN_OP=8, 
		BOOL_UNARY_OP=9, STRING=10, NUMBER=11, ID=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "THEN", "ELSE", "FI", "LPARAM", "RPARAM", "COMMA", "BOOL_BIN_OP", 
		"BOOL_UNARY_OP", "STRING", "NUMBER", "ID", "WS"
	};


	public KGramLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KGramLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'#ifMInt'", "'#then'", "'#else'", "'#fi'", "'('", "')'", "','", 
		null, "'notBool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "THEN", "ELSE", "FI", "LPARAM", "RPARAM", "COMMA", "BOOL_BIN_OP", 
		"BOOL_UNARY_OP", "STRING", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KGram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KGramLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', '\x87', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\\', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', 'h', '\n', '\v', '\f', '\v', '\xE', '\v', 'k', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'p', '\n', '\v', 
		'\x3', '\f', '\x6', '\f', 's', '\n', '\f', '\r', '\f', '\xE', '\f', 't', 
		'\x3', '\r', '\x3', '\r', '\x6', '\r', 'y', '\n', '\r', '\r', '\r', '\xE', 
		'\r', 'z', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x7F', '\n', '\r', 
		'\x3', '\xE', '\x6', '\xE', '\x82', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 
		'\x83', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x3', '\x2', '\a', '\x3', '\x2', '$', '$', '\x3', 
		'\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', 
		'\x32', ';', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x2', '\x90', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x5', '%', '\x3', '\x2', '\x2', '\x2', 
		'\a', '+', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x35', '\x3', '\x2', '\x2', '\x2', '\r', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x13', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x15', 'o', '\x3', '\x2', '\x2', '\x2', '\x17', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '~', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '%', '\x2', '\x2', '\x1E', 
		'\x1F', '\a', 'k', '\x2', '\x2', '\x1F', ' ', '\a', 'h', '\x2', '\x2', 
		' ', '!', '\a', 'O', '\x2', '\x2', '!', '\"', '\a', 'K', '\x2', '\x2', 
		'\"', '#', '\a', 'p', '\x2', '\x2', '#', '$', '\a', 'v', '\x2', '\x2', 
		'$', '\x4', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '%', '\x2', '\x2', 
		'&', '\'', '\a', 'v', '\x2', '\x2', '\'', '(', '\a', 'j', '\x2', '\x2', 
		'(', ')', '\a', 'g', '\x2', '\x2', ')', '*', '\a', 'p', '\x2', '\x2', 
		'*', '\x6', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '%', '\x2', '\x2', 
		',', '-', '\a', 'g', '\x2', '\x2', '-', '.', '\a', 'n', '\x2', '\x2', 
		'.', '/', '\a', 'u', '\x2', '\x2', '/', '\x30', '\a', 'g', '\x2', '\x2', 
		'\x30', '\b', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '%', '\x2', 
		'\x2', '\x32', '\x33', '\a', 'h', '\x2', '\x2', '\x33', '\x34', '\a', 
		'k', '\x2', '\x2', '\x34', '\n', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '*', '\x2', '\x2', '\x36', '\f', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '+', '\x2', '\x2', '\x38', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\a', '.', '\x2', '\x2', ':', '\x10', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '?', '\x2', '\x2', '<', '=', '\a', '?', '\x2', 
		'\x2', '=', '>', '\a', '\x44', '\x2', '\x2', '>', '?', '\a', 'q', '\x2', 
		'\x2', '?', '@', '\a', 'q', '\x2', '\x2', '@', '\\', '\a', 'n', '\x2', 
		'\x2', '\x41', '\x42', '\a', '#', '\x2', '\x2', '\x42', '\x43', '\a', 
		'?', '\x2', '\x2', '\x43', '\x44', '\a', '\x44', '\x2', '\x2', '\x44', 
		'\x45', '\a', 'q', '\x2', '\x2', '\x45', '\x46', '\a', 'q', '\x2', '\x2', 
		'\x46', '\\', '\a', 'n', '\x2', '\x2', 'G', 'H', '\a', '\x63', '\x2', 
		'\x2', 'H', 'I', '\a', 'p', '\x2', '\x2', 'I', 'J', '\a', '\x66', '\x2', 
		'\x2', 'J', 'K', '\a', '\x44', '\x2', '\x2', 'K', 'L', '\a', 'q', '\x2', 
		'\x2', 'L', 'M', '\a', 'q', '\x2', '\x2', 'M', '\\', '\a', 'n', '\x2', 
		'\x2', 'N', 'O', '\a', 'q', '\x2', '\x2', 'O', 'P', '\a', 't', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x44', '\x2', '\x2', 'Q', 'R', '\a', 'q', '\x2', 
		'\x2', 'R', 'S', '\a', 'q', '\x2', '\x2', 'S', '\\', '\a', 'n', '\x2', 
		'\x2', 'T', 'U', '\a', 'z', '\x2', '\x2', 'U', 'V', '\a', 'q', '\x2', 
		'\x2', 'V', 'W', '\a', 't', '\x2', '\x2', 'W', 'X', '\a', '\x44', '\x2', 
		'\x2', 'X', 'Y', '\a', 'q', '\x2', '\x2', 'Y', 'Z', '\a', 'q', '\x2', 
		'\x2', 'Z', '\\', '\a', 'n', '\x2', '\x2', '[', ';', '\x3', '\x2', '\x2', 
		'\x2', '[', '\x41', '\x3', '\x2', '\x2', '\x2', '[', 'G', '\x3', '\x2', 
		'\x2', '\x2', '[', 'N', '\x3', '\x2', '\x2', '\x2', '[', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x12', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'p', '\x2', '\x2', '^', '_', '\a', 'q', '\x2', '\x2', '_', '`', '\a', 
		'v', '\x2', '\x2', '`', '\x61', '\a', '\x44', '\x2', '\x2', '\x61', '\x62', 
		'\a', 'q', '\x2', '\x2', '\x62', '\x63', '\a', 'q', '\x2', '\x2', '\x63', 
		'\x64', '\a', 'n', '\x2', '\x2', '\x64', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'i', '\a', '$', '\x2', '\x2', '\x66', 'h', '\n', '\x2', 
		'\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'p', '\a', '$', '\x2', '\x2', 'm', 'n', '\a', 
		'\'', '\x2', '\x2', 'n', 'p', '\x5', '\x15', '\v', '\x2', 'o', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 
		'\x16', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\t', '\x3', '\x2', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', '\x18', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\t', '\x4', '\x2', 
		'\x2', 'w', 'y', '\t', '\x5', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\a', '\'', '\x2', '\x2', '}', '\x7F', '\x5', 
		'\x19', '\r', '\x2', '~', 'v', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\t', '\x6', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\b', '\xE', '\x2', 
		'\x2', '\x86', '\x1C', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', '[', 'i', 
		'o', 't', 'z', '~', '\x83', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KDetails
