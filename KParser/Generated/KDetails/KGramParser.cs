//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/colton/.IdeaIC2019.2/config/scratches\KGram.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KDetails {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KGramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, THEN=2, ELSE=3, FI=4, LPARAM=5, RPARAM=6, COMMA=7, BOOL_BIN_OP=8, 
		BOOL_UNARY_OP=9, STRING=10, NUMBER=11, ID=12, WS=13;
	public const int
		RULE_expression = 0, RULE_root = 1;
	public static readonly string[] ruleNames = {
		"expression", "root"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#ifMInt'", "'#then'", "'#else'", "'#fi'", "'('", "')'", "','", 
		null, "'notBool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "THEN", "ELSE", "FI", "LPARAM", "RPARAM", "COMMA", "BOOL_BIN_OP", 
		"BOOL_UNARY_OP", "STRING", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KGram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KGramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KGramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KGramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode LPARAM() { return GetToken(KGramParser.LPARAM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPARAM() { return GetToken(KGramParser.RPARAM, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ITerminalNode IF() { return GetToken(KGramParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(KGramParser.THEN, 0); }
		public ITerminalNode FI() { return GetToken(KGramParser.FI, 0); }
		public ITerminalNode ELSE() { return GetToken(KGramParser.ELSE, 0); }
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryBoolExpressionContext : ExpressionContext {
		public ITerminalNode BOOL_UNARY_OP() { return GetToken(KGramParser.BOOL_UNARY_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryBoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterUnaryBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitUnaryBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(KGramParser.STRING, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerExpressionContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(KGramParser.NUMBER, 0); }
		public IntegerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBoolExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BOOL_BIN_OP() { return GetToken(KGramParser.BOOL_BIN_OP, 0); }
		public BinaryBoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterBinaryBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitBinaryBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(KGramParser.ID, 0); }
		public ITerminalNode LPARAM() { return GetToken(KGramParser.LPARAM, 0); }
		public ITerminalNode RPARAM() { return GetToken(KGramParser.RPARAM, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KGramParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KGramParser.COMMA, i);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(KGramParser.ID, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5; Match(LPARAM);
				State = 6; expression(0);
				State = 7; Match(RPARAM);
				}
				break;
			case 2:
				{
				_localctx = new IfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9; Match(IF);
				State = 10; expression(0);
				State = 11; Match(THEN);
				State = 12; expression(0);
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 13; Match(ELSE);
					State = 14; expression(0);
					}
				}

				State = 17; Match(FI);
				}
				break;
			case 3:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(ID);
				State = 20; Match(LPARAM);
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << LPARAM) | (1L << BOOL_UNARY_OP) | (1L << STRING) | (1L << NUMBER) | (1L << ID))) != 0)) {
					{
					State = 21; expression(0);
					State = 26;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 22; Match(COMMA);
						State = 23; expression(0);
						}
						}
						State = 28;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 31; Match(RPARAM);
				}
				break;
			case 4:
				{
				_localctx = new UnaryBoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32; Match(BOOL_UNARY_OP);
				State = 33; expression(4);
				}
				break;
			case 5:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34; Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new IntegerExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35; Match(NUMBER);
				}
				break;
			case 7:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 36; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 44;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryBoolExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 39;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 40; Match(BOOL_BIN_OP);
					State = 41; expression(6);
					}
					} 
				}
				State = 46;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKGramListener typedListener = listener as IKGramListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKGramVisitor<TResult> typedVisitor = visitor as IKGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 2, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\x34', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x12', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x1B', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1E', '\v', '\x2', '\x5', '\x2', ' ', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '(', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '-', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x30', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', '\x3', '\x2', '\x4', 
		'\x2', '\x4', '\x2', '\x2', '\x2', ';', '\x2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x31', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\b', '\x2', 
		'\x1', '\x2', '\a', '\b', '\a', '\a', '\x2', '\x2', '\b', '\t', '\x5', 
		'\x2', '\x2', '\x2', '\t', '\n', '\a', '\b', '\x2', '\x2', '\n', '(', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\f', '\a', '\x3', '\x2', '\x2', '\f', 
		'\r', '\x5', '\x2', '\x2', '\x2', '\r', '\xE', '\a', '\x4', '\x2', '\x2', 
		'\xE', '\x11', '\x5', '\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\x5', 
		'\x2', '\x2', '\x10', '\x12', '\x5', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', '\x6', 
		'\x2', '\x2', '\x14', '(', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', 
		'\a', '\xE', '\x2', '\x2', '\x16', '\x1F', '\a', '\a', '\x2', '\x2', '\x17', 
		'\x1C', '\x5', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\t', '\x2', 
		'\x2', '\x19', '\x1B', '\x5', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', ' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', 
		'!', '(', '\a', '\b', '\x2', '\x2', '\"', '#', '\a', '\v', '\x2', '\x2', 
		'#', '(', '\x5', '\x2', '\x2', '\x6', '$', '(', '\a', '\f', '\x2', '\x2', 
		'%', '(', '\a', '\r', '\x2', '\x2', '&', '(', '\a', '\xE', '\x2', '\x2', 
		'\'', '\x6', '\x3', '\x2', '\x2', '\x2', '\'', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\x15', '\x3', '\x2', '\x2', '\x2', '\'', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\'', '$', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '.', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\f', '\a', '\x2', '\x2', '*', '+', 
		'\a', '\n', '\x2', '\x2', '+', '-', '\x5', '\x2', '\x2', '\b', ',', ')', 
		'\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', 
		',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x3', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x5', '\x2', '\x2', '\x2', '\x32', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x11', '\x1C', '\x1F', '\'', '.',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KDetails
